// lib/migration-multi-municipality.ts

import { createClient } from '@/lib/supabase/client'
import { supportedMunicipalities } from '@/lib/postal-code-mapping'
import { boussoleQuestions, partiesData } from '@/lib/boussole-data'

/**
 * Script de migration pour l'architecture multi-municipalit√©s
 * 1. Cr√©e la table municipalities
 * 2. Ajoute les colonnes municipality_id aux tables existantes
 * 3. Migre toutes les donn√©es Qu√©bec existantes
 */

export async function createMunicipalitiesTable() {
  const supabase = createClient()

  console.log('üèôÔ∏è [MIGRATION] Cr√©ation de la table municipalities...')

  // Cr√©er la table municipalities
  const { error: createTableError } = await supabase.rpc('sql', {
    query: `
      CREATE TABLE IF NOT EXISTS municipalities (
        id VARCHAR PRIMARY KEY,
        name VARCHAR NOT NULL,
        code VARCHAR UNIQUE NOT NULL,
        province VARCHAR DEFAULT 'QC',
        population INTEGER,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `
  })

  if (createTableError) {
    console.error('‚ùå Erreur cr√©ation table municipalities:', createTableError)
    throw createTableError
  }

  console.log('‚úÖ Table municipalities cr√©√©e')

  // Ins√©rer les municipalit√©s support√©es
  console.log('üìä Insertion des municipalit√©s...')

  for (const municipality of supportedMunicipalities) {
    const { error: insertError } = await supabase
      .from('municipalities')
      .upsert({
        id: municipality.id,
        name: municipality.name,
        code: municipality.id.toUpperCase(),
        province: 'QC',
        population: municipality.population,
        is_active: true
      })

    if (insertError) {
      console.error(`‚ùå Erreur insertion municipalit√© ${municipality.name}:`, insertError)
    } else {
      console.log(`‚úÖ Municipalit√© ${municipality.name} ins√©r√©e`)
    }
  }

  console.log('üéâ Municipalit√©s cr√©√©es avec succ√®s')
}

export async function addMunicipalityIdColumns() {
  const supabase = createClient()

  console.log('üîß [MIGRATION] Ajout des colonnes municipality_id...')

  const alterQueries = [
    // Questions
    `ALTER TABLE questions ADD COLUMN IF NOT EXISTS municipality_id VARCHAR REFERENCES municipalities(id);`,
    `ALTER TABLE questions ADD COLUMN IF NOT EXISTS is_generic BOOLEAN DEFAULT true;`,

    // Parties
    `ALTER TABLE parties ADD COLUMN IF NOT EXISTS municipality_id VARCHAR REFERENCES municipalities(id);`,

    // User tables
    `ALTER TABLE user_sessions ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;`,
    `ALTER TABLE user_responses ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;`,
    `ALTER TABLE user_results ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;`,
  ]

  for (const query of alterQueries) {
    const { error } = await supabase.rpc('sql', { query })
    if (error) {
      console.error('‚ùå Erreur ALTER TABLE:', error)
      throw error
    }
  }

  console.log('‚úÖ Colonnes municipality_id ajout√©es')
}

export async function migrateQuebecData() {
  const supabase = createClient()

  console.log('üçÅ [MIGRATION] Migration des donn√©es Qu√©bec...')

  // 1. Migrer les questions existantes vers Quebec
  console.log('üìù Migration des questions...')

  for (const question of boussoleQuestions) {
    const { error: questionError } = await supabase
      .from('questions')
      .upsert({
        id: question.id,
        text: question.text,
        category: question.category,
        response_type: question.responseType,
        description: question.description || null,
        response_format: question.responseFormat || 'standard',
        agreement_options: question.agreementOptions,
        importance_options: question.importanceOptions,
        importance_direct_options: question.importanceDirectOptions || null,
        priority_options: question.priorityOptions || null,
        custom_agreement_labels: question.customAgreementLabels || null,
        custom_importance_direct_labels: question.customImportanceDirectLabels || null,
        order_index: boussoleQuestions.indexOf(question),
        municipality_id: 'quebec', // Assigner √† Qu√©bec
        is_generic: !isQuebecSpecificQuestion(question.id), // Marquer les questions sp√©cifiques
      })

    if (questionError) {
      console.error(`‚ùå Erreur migration question ${question.id}:`, questionError)
    }
  }

  console.log('‚úÖ Questions migr√©es vers Qu√©bec')

  // 2. Migrer les partis vers Quebec
  console.log('üèõÔ∏è Migration des partis...')

  for (const party of partiesData) {
    const { error: partyError } = await supabase
      .from('parties')
      .upsert({
        id: party.id,
        name: party.name,
        short_name: party.shortName || null,
        leader: party.leader,
        logo_url: party.logoUrl,
        website_url: party.websiteUrl || null,
        orientation: party.orientation || null,
        main_ideas_summary: party.mainIdeasSummary || null,
        strengths: party.strengths || [],
        reserves: party.reserves || [],
        municipality_id: 'quebec', // Assigner √† Qu√©bec
      })

    if (partyError) {
      console.error(`‚ùå Erreur migration parti ${party.name}:`, partyError)
    }

    // Migrer les positions du parti
    for (const position of party.positions) {
      const { error: positionError } = await supabase
        .from('party_positions')
        .upsert({
          party_id: party.id,
          question_id: position.questionId,
          position: position.position,
          source: position.source || null,
          note: position.note || null,
          quote: position.quote || null,
        })

      if (positionError) {
        console.error(`‚ùå Erreur migration position ${party.id}-${position.questionId}:`, positionError)
      }
    }
  }

  console.log('‚úÖ Partis et positions migr√©s vers Qu√©bec')

  // 3. Mettre √† jour les sessions utilisateur existantes
  console.log('üë• Mise √† jour des sessions utilisateur...')

  const { error: sessionError } = await supabase
    .from('user_sessions')
    .update({ municipality_id: 'quebec' })
    .is('municipality_id', null)

  if (sessionError) {
    console.error('‚ùå Erreur mise √† jour sessions:', sessionError)
  } else {
    console.log('‚úÖ Sessions utilisateur mises √† jour')
  }

  console.log('üéâ Migration compl√®te des donn√©es Qu√©bec termin√©e')
}

/**
 * D√©termine si une question est sp√©cifique √† Qu√©bec
 */
function isQuebecSpecificQuestion(questionId: string): boolean {
  const quebecSpecificQuestions = [
    'q1_tramway', // Sp√©cifique au projet de tramway de Qu√©bec
    'q3_troisieme_lien', // Sp√©cifique au 3e lien Qu√©bec-L√©vis
  ]

  return quebecSpecificQuestions.includes(questionId)
}

/**
 * Migration compl√®te multi-municipalit√©s
 */
export async function runFullMultiMunicipalityMigration() {
  console.log('üöÄ [MIGRATION] D√©but de la migration multi-municipalit√©s')
  console.log('=' .repeat(60))

  try {
    // √âtape 1: Cr√©er la table municipalities
    await createMunicipalitiesTable()

    // √âtape 2: Ajouter les colonnes municipality_id
    await addMunicipalityIdColumns()

    // √âtape 3: Migrer les donn√©es Qu√©bec
    await migrateQuebecData()

    console.log('=' .repeat(60))
    console.log('üéâ [MIGRATION] Migration multi-municipalit√©s termin√©e avec succ√®s!')
    console.log('')
    console.log('üìä R√©sultats:')
    console.log(`  ‚Ä¢ ${supportedMunicipalities.length} municipalit√©s cr√©√©es`)
    console.log(`  ‚Ä¢ ${boussoleQuestions.length} questions migr√©es vers Qu√©bec`)
    console.log(`  ‚Ä¢ ${partiesData.length} partis migr√©s vers Qu√©bec`)
    console.log('  ‚Ä¢ Sessions utilisateur existantes mises √† jour')
    console.log('')
    console.log('üîß Prochaines √©tapes:')
    console.log('  ‚Ä¢ Tester la d√©tection automatique de municipalit√©')
    console.log('  ‚Ä¢ Ajouter les donn√©es des autres municipalit√©s')
    console.log('  ‚Ä¢ Impl√©menter le routing dynamique')

    return {
      success: true,
      municipalitiesCreated: supportedMunicipalities.length,
      questionsmigrated: boussoleQuestions.length,
      partiesMigrated: partiesData.length,
    }

  } catch (error) {
    console.error('üí• [MIGRATION] Erreur fatale:', error)
    throw error
  }
}

/**
 * Fonction de v√©rification post-migration
 */
export async function verifyMultiMunicipalityMigration() {
  const supabase = createClient()

  console.log('üîç [VERIFICATION] V√©rification de la migration...')

  // V√©rifier les municipalit√©s
  const { data: municipalities, error: munError } = await supabase
    .from('municipalities')
    .select('*')

  if (munError) {
    console.error('‚ùå Erreur v√©rification municipalit√©s:', munError)
    return { success: false, error: munError }
  }

  // V√©rifier les questions avec municipality_id
  const { data: questions, error: qError } = await supabase
    .from('questions')
    .select('id, municipality_id, is_generic')
    .eq('municipality_id', 'quebec')

  if (qError) {
    console.error('‚ùå Erreur v√©rification questions:', qError)
    return { success: false, error: qError }
  }

  // V√©rifier les partis avec municipality_id
  const { data: parties, error: pError } = await supabase
    .from('parties')
    .select('id, name, municipality_id')
    .eq('municipality_id', 'quebec')

  if (pError) {
    console.error('‚ùå Erreur v√©rification partis:', pError)
    return { success: false, error: pError }
  }

  console.log('‚úÖ V√©rification termin√©e:')
  console.log(`  ‚Ä¢ ${municipalities?.length || 0} municipalit√©s cr√©√©es`)
  console.log(`  ‚Ä¢ ${questions?.length || 0} questions assign√©es √† Qu√©bec`)
  console.log(`  ‚Ä¢ ${parties?.length || 0} partis assign√©s √† Qu√©bec`)

  return {
    success: true,
    verification: {
      municipalities: municipalities?.length || 0,
      questions: questions?.length || 0,
      parties: parties?.length || 0,
    }
  }
}