-- ========================================================================
-- MIGRATION 1: CRÃ‰ER LES TABLES POUR L'ARCHITECTURE MULTI-MUNICIPALITÃ‰S
-- ========================================================================
-- Ã€ exÃ©cuter dans Supabase SQL Editor
-- Date: 2025-09-21
-- ========================================================================

-- ========================================================================
-- 1. CRÃ‰ER LA TABLE MUNICIPALITIES
-- ========================================================================
CREATE TABLE IF NOT EXISTS municipalities (
  id VARCHAR PRIMARY KEY,
  name VARCHAR NOT NULL,
  code VARCHAR UNIQUE NOT NULL,
  province VARCHAR DEFAULT 'QC',
  population INTEGER,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Index pour performance
CREATE INDEX IF NOT EXISTS idx_municipalities_active ON municipalities(is_active);

-- ========================================================================
-- 2. CRÃ‰ER LA TABLE QUESTIONS
-- ========================================================================
CREATE TABLE IF NOT EXISTS questions (
  id VARCHAR PRIMARY KEY,
  text TEXT NOT NULL,
  category VARCHAR NOT NULL,
  response_type VARCHAR NOT NULL CHECK (response_type IN ('agreement', 'importance_direct', 'priority_ranking')),
  description TEXT,
  response_format VARCHAR DEFAULT 'standard',
  agreement_options JSONB,
  importance_options JSONB,
  importance_direct_options JSONB,
  priority_options JSONB,
  custom_agreement_labels JSONB,
  custom_importance_direct_labels JSONB,
  order_index INTEGER,
  municipality_id VARCHAR REFERENCES municipalities(id) ON DELETE CASCADE,
  is_generic BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Index pour performance
CREATE INDEX IF NOT EXISTS idx_questions_municipality ON questions(municipality_id);
CREATE INDEX IF NOT EXISTS idx_questions_order ON questions(order_index);

-- ========================================================================
-- 3. CRÃ‰ER LA TABLE PARTIES
-- ========================================================================
CREATE TABLE IF NOT EXISTS parties (
  id VARCHAR PRIMARY KEY,
  name VARCHAR NOT NULL,
  short_name VARCHAR,
  leader VARCHAR NOT NULL,
  logo_url VARCHAR,
  color VARCHAR,
  website_url VARCHAR,
  orientation VARCHAR,
  main_ideas_summary TEXT,
  strengths JSONB,
  reserves JSONB,
  priorities JSONB,
  municipality_id VARCHAR REFERENCES municipalities(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Index pour performance
CREATE INDEX IF NOT EXISTS idx_parties_municipality ON parties(municipality_id);

-- ========================================================================
-- 4. CRÃ‰ER LA TABLE PARTY_POSITIONS
-- ========================================================================
CREATE TABLE IF NOT EXISTS party_positions (
  id SERIAL PRIMARY KEY,
  party_id VARCHAR REFERENCES parties(id) ON DELETE CASCADE,
  question_id VARCHAR REFERENCES questions(id) ON DELETE CASCADE,
  position VARCHAR NOT NULL,
  source TEXT,
  note TEXT,
  quote TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(party_id, question_id)
);

-- Index pour performance
CREATE INDEX IF NOT EXISTS idx_party_positions_party ON party_positions(party_id);
CREATE INDEX IF NOT EXISTS idx_party_positions_question ON party_positions(question_id);

-- ========================================================================
-- 5. AJOUTER COLONNES MUNICIPALITY_ID AUX TABLES EXISTANTES
-- ========================================================================

-- Table user_sessions
ALTER TABLE user_sessions ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;
CREATE INDEX IF NOT EXISTS idx_user_sessions_municipality ON user_sessions(municipality_id);

-- Table user_responses
ALTER TABLE user_responses ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;
CREATE INDEX IF NOT EXISTS idx_user_responses_municipality ON user_responses(municipality_id);

-- Table user_results
ALTER TABLE user_results ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;
CREATE INDEX IF NOT EXISTS idx_user_results_municipality ON user_results(municipality_id);

-- Table user_profiles
ALTER TABLE user_profiles ADD COLUMN IF NOT EXISTS municipality_id VARCHAR;
CREATE INDEX IF NOT EXISTS idx_user_profiles_municipality ON user_profiles(municipality_id);

-- ========================================================================
-- 6. ACTIVER ROW LEVEL SECURITY (RLS)
-- ========================================================================

-- Activer RLS sur les nouvelles tables
ALTER TABLE municipalities ENABLE ROW LEVEL SECURITY;
ALTER TABLE questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE parties ENABLE ROW LEVEL SECURITY;
ALTER TABLE party_positions ENABLE ROW LEVEL SECURITY;

-- ========================================================================
-- 7. CRÃ‰ER LES POLITIQUES RLS (LECTURE PUBLIQUE)
-- ========================================================================

-- Politique pour municipalities - Lecture publique
CREATE POLICY "MunicipalitÃ©s publiquement lisibles"
  ON municipalities
  FOR SELECT
  USING (true);

-- Politique pour questions - Lecture publique
CREATE POLICY "Questions publiquement lisibles"
  ON questions
  FOR SELECT
  USING (true);

-- Politique pour parties - Lecture publique
CREATE POLICY "Partis publiquement lisibles"
  ON parties
  FOR SELECT
  USING (true);

-- Politique pour party_positions - Lecture publique
CREATE POLICY "Positions publiquement lisibles"
  ON party_positions
  FOR SELECT
  USING (true);

-- ========================================================================
-- 8. CRÃ‰ER LES FONCTIONS DE MISE Ã€ JOUR AUTOMATIQUE
-- ========================================================================

-- Fonction pour mettre Ã  jour updated_at automatiquement
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers pour updated_at
CREATE TRIGGER update_municipalities_updated_at
  BEFORE UPDATE ON municipalities
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_questions_updated_at
  BEFORE UPDATE ON questions
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_parties_updated_at
  BEFORE UPDATE ON parties
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_party_positions_updated_at
  BEFORE UPDATE ON party_positions
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

-- ========================================================================
-- 9. INSÃ‰RER LES MUNICIPALITÃ‰S SUPPORTÃ‰ES
-- ========================================================================

INSERT INTO municipalities (id, name, code, population, is_active) VALUES
  ('quebec', 'Ville de QuÃ©bec', 'QUEBEC', 549459, true),
  ('montreal', 'Ville de MontrÃ©al', 'MONTREAL', 1780000, true),
  ('laval', 'Ville de Laval', 'LAVAL', 438366, true),
  ('gatineau', 'Ville de Gatineau', 'GATINEAU', 291041, true),
  ('longueuil', 'Ville de Longueuil', 'LONGUEUIL', 254483, true),
  ('levis', 'Ville de LÃ©vis', 'LEVIS', 149683, true)
ON CONFLICT (id) DO NOTHING;

-- ========================================================================
-- 10. MIGRER LES DONNÃ‰ES EXISTANTES VERS QUÃ‰BEC
-- ========================================================================

-- Mettre Ã  jour les sessions existantes pour QuÃ©bec
UPDATE user_sessions
SET municipality_id = 'quebec'
WHERE municipality_id IS NULL;

-- Mettre Ã  jour les rÃ©ponses existantes pour QuÃ©bec
UPDATE user_responses
SET municipality_id = 'quebec'
WHERE municipality_id IS NULL;

-- Mettre Ã  jour les rÃ©sultats existants pour QuÃ©bec
UPDATE user_results
SET municipality_id = 'quebec'
WHERE municipality_id IS NULL;

-- Mettre Ã  jour les profils existants pour QuÃ©bec
UPDATE user_profiles
SET municipality_id = 'quebec'
WHERE municipality_id IS NULL;

-- ========================================================================
-- 11. CRÃ‰ER UNE VUE POUR FACILITER LES REQUÃŠTES
-- ========================================================================

-- Vue pour rÃ©cupÃ©rer tous les partis avec leurs positions
CREATE OR REPLACE VIEW party_complete_view AS
SELECT
  p.*,
  m.name as municipality_name,
  COUNT(DISTINCT pp.id) as total_positions
FROM parties p
LEFT JOIN municipalities m ON p.municipality_id = m.id
LEFT JOIN party_positions pp ON p.id = pp.party_id
GROUP BY p.id, p.name, p.short_name, p.leader, p.logo_url, p.color,
         p.website_url, p.orientation, p.main_ideas_summary, p.strengths,
         p.reserves, p.priorities, p.municipality_id, p.created_at,
         p.updated_at, m.name;

-- Vue pour rÃ©cupÃ©rer les questions avec leur ordre
CREATE OR REPLACE VIEW questions_ordered_view AS
SELECT
  q.*,
  m.name as municipality_name
FROM questions q
LEFT JOIN municipalities m ON q.municipality_id = m.id
ORDER BY q.order_index, q.id;

-- ========================================================================
-- 12. MESSAGE DE CONFIRMATION
-- ========================================================================

DO $$
BEGIN
  RAISE NOTICE 'âœ… Tables crÃ©Ã©es avec succÃ¨s!';
  RAISE NOTICE 'âœ… MunicipalitÃ©s insÃ©rÃ©es';
  RAISE NOTICE 'âœ… Politiques RLS configurÃ©es';
  RAISE NOTICE 'âœ… Triggers et vues crÃ©Ã©s';
  RAISE NOTICE '';
  RAISE NOTICE 'ðŸ“‹ Prochaine Ã©tape: ExÃ©cuter 02_insert_questions_data.sql';
END
$$;