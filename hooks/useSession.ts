import { useState, useEffect, useRef } from 'react'

// Types pour la session
interface Session {
  id: string
  sessionToken: string
  expiresAt: string
  createdAt: string
}

interface SessionState {
  sessionToken: string | null
  isSessionValid: boolean
  isLoading: boolean
  isInitializing: boolean
  error: string | null
}

/**
 * ‚úÖ Hook simplifi√© pour g√©rer les sessions utilisateur
 * √âlimine les boucles infinites et la complexit√© du localStorage
 */
export function useSession() {
  const [state, setState] = useState<SessionState>({
    sessionToken: null,
    isSessionValid: false,
    isLoading: true,
    isInitializing: true,
    error: null
  })
  
  // ‚úÖ R√©f√©rence pour √©viter les double-initialisations
  const initializingRef = useRef(false)

  // ‚úÖ Fonction pour cr√©er une nouvelle session
  const createSession = async (): Promise<{ sessionToken: string } | null> => {
    try {
      console.log('üÜï [useSession] Cr√©ation nouvelle session...')
      
      const response = await fetch('/api/sessions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (!response.ok) {
        throw new Error(`Erreur ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      
      if (data.success && data.session) {
        console.log('‚úÖ [useSession] Session cr√©√©e:', data.session.sessionToken)
        return { sessionToken: data.session.sessionToken }
      } else {
        throw new Error(data.message || '√âchec de cr√©ation de session')
      }
    } catch (error) {
      console.error('‚ùå [useSession] Erreur cr√©ation session:', error)
      return null
    }
  }

  // ‚úÖ Effet d'initialisation simplifi√©
  useEffect(() => {
    // Emp√™cher les double-initialisations
    if (initializingRef.current) {
      return
    }

    if (!state.isInitializing) {
      return
    }

    initializingRef.current = true
    console.log('üöÄ [useSession] Initialisation session')

    createSession().then((result) => {
      if (result) {
        setState({
          sessionToken: result.sessionToken,
          isSessionValid: true,
          isLoading: false,
          isInitializing: false,
          error: null
        })
        console.log('‚úÖ [useSession] Session initialis√©e avec succ√®s')
      } else {
        setState(prev => ({
          ...prev,
          isLoading: false,
          isInitializing: false,
          error: 'Impossible de cr√©er une session'
        }))
        console.error('‚ùå [useSession] √âchec initialisation session')
      }
      initializingRef.current = false
    })

    // ‚úÖ Cleanup function
    return () => {
      console.log('üßπ [useSession] Cleanup')
    }
  }, [state.isInitializing])

  return {
    sessionToken: state.sessionToken,
    isSessionValid: state.isSessionValid,
    isLoading: state.isLoading,
    isInitializing: state.isInitializing,
    error: state.error
  }
} 