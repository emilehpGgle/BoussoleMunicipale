import { useState, useEffect, useRef, useCallback } from 'react'

// Types pour la session
interface Session {
  id: string
  sessionToken: string
  expiresAt: string
  createdAt: string
}

interface SessionState {
  session: Session | null
  isLoading: boolean
  error: string | null
}

export function useSession() {
  const [state, setState] = useState<SessionState>({
    session: null,
    isLoading: true,
    error: null
  })

  const mountedRef = useRef(true)
  const initializingRef = useRef(false)

  // ‚úÖ Cr√©er une nouvelle session (fonction simple)
  const createSession = useCallback(async (): Promise<Session | null> => {
    console.log('üÜï [useSession] Tentative de cr√©ation session...')
    
    try {
      const response = await fetch('/api/sessions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      })

      console.log('üì° [useSession] R√©ponse API:', response.status, response.ok)

      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå [useSession] Erreur r√©ponse:', errorText)
        throw new Error(`Erreur cr√©ation session: ${response.status} - ${errorText}`)
      }

      const data = await response.json()
      console.log('üì• [useSession] Donn√©es compl√®tes re√ßues:', JSON.stringify(data, null, 2))
      
      if (data.success && data.session) {
        console.log('‚úÖ [useSession] Session cr√©√©e avec succ√®s:', {
          id: data.session.id,
          token: data.session.sessionToken ? data.session.sessionToken.substring(0, 15) + '...' : 'MISSING',
          expires: data.session.expiresAt
        })
        return data.session
      } else {
        console.error('‚ùå [useSession] R√©ponse invalide:', data)
        throw new Error(data.error || 'R√©ponse invalide du serveur')
      }
    } catch (error) {
      console.error('‚ùå [useSession] Erreur cr√©ation compl√®te:', error)
      throw error
    }
  }, [])

  // ‚úÖ Initialisation simple une seule fois
  useEffect(() => {
    const initializeSession = async () => {
      // √âviter les doubles initialisations
      if (initializingRef.current) {
        console.log('‚è∏Ô∏è [useSession] Initialisation d√©j√† en cours, ignor√©e')
        return
      }

      initializingRef.current = true
      console.log('üöÄ [useSession] D√©but initialisation session')

      try {
        setState(prev => ({ ...prev, isLoading: true, error: null }))

        const newSession = await createSession()
        console.log('üîç [useSession] Session retourn√©e par createSession:', newSession)
        
        if (mountedRef.current && newSession) {
          console.log('‚úÖ [useSession] Mise √† jour √©tat avec nouvelle session')
          setState({
            session: newSession,
            isLoading: false,
            error: null
          })
        } else if (mountedRef.current) {
          console.error('‚ùå [useSession] Session cr√©√©e mais invalide ou composant d√©mont√©')
          throw new Error('Session cr√©√©e mais invalide')
        }
        
      } catch (error) {
        console.error('‚ùå [useSession] Erreur initialisation:', error)
        if (mountedRef.current) {
          setState({
            session: null,
            isLoading: false,
            error: error instanceof Error ? error.message : 'Erreur inconnue'
          })
        }
      } finally {
        initializingRef.current = false
        console.log('üèÅ [useSession] Fin initialisation, initializingRef.current =', initializingRef.current)
      }
    }

    console.log('‚ö° [useSession] useEffect d√©clench√©, isInitializing =', initializingRef.current)
    
    // Lancer l'initialisation
    initializeSession()

    // Cleanup
    return () => {
      console.log('üßπ [useSession] Cleanup')
      mountedRef.current = false
    }
  }, [createSession]) // createSession ne change jamais donc pas de boucle

  // ‚úÖ Utilitaires d√©riv√©s
  const sessionToken = state.session?.sessionToken || null
  const isSessionValid = Boolean(
    state.session?.sessionToken && 
    state.session?.expiresAt && 
    new Date(state.session.expiresAt) > new Date()
  )

  // ‚úÖ Supprimer session
  const deleteSession = useCallback(async (): Promise<void> => {
    try {
      if (sessionToken) {
        await fetch(`/api/sessions?sessionToken=${encodeURIComponent(sessionToken)}`, {
          method: 'DELETE'
        })
      }
      
      if (mountedRef.current) {
        setState({
          session: null,
          isLoading: false,
          error: null
        })
      }
    } catch (error) {
      console.error('‚ùå [useSession] Erreur suppression session:', error)
    }
  }, [sessionToken])

  // ‚úÖ Fonction pour forcer cr√©ation de session (pour debugging)
  const getOrCreateSession = useCallback(async (): Promise<Session | null> => {
    if (state.session && isSessionValid) {
      return state.session
    }
    
    try {
      const newSession = await createSession()
      if (newSession && mountedRef.current) {
        setState(prev => ({
          ...prev,
          session: newSession,
          error: null
        }))
      }
      return newSession
    } catch (error) {
      console.error('‚ùå [useSession] Erreur getOrCreateSession:', error)
      return null
    }
  }, [state.session, isSessionValid, createSession])

  // ‚úÖ Log de debug d√©taill√©
  console.log('üîç [useSession] √âtat complet:', {
    hasSession: !!state.session,
    sessionObject: state.session ? {
      id: state.session.id,
      tokenExists: !!state.session.sessionToken,
      tokenLength: state.session.sessionToken?.length || 0,
      expires: state.session.expiresAt
    } : null,
    sessionToken: sessionToken || 'NULL',
    tokenSubstring: sessionToken ? sessionToken.substring(0, 10) + '...' : 'NULL',
    isValid: isSessionValid,
    isLoading: state.isLoading,
    initializing: initializingRef.current,
    error: state.error,
    mountedRef: mountedRef.current
  })

  return {
    // ‚úÖ √âtat principal
    session: state.session,
    sessionToken,
    isSessionValid,
    isLoading: state.isLoading,
    error: state.error,
    isInitializing: initializingRef.current,
    
    // ‚úÖ Actions
    getOrCreateSession,
    deleteSession,
    getSessionToken: useCallback(() => sessionToken, [sessionToken])
  }
} 