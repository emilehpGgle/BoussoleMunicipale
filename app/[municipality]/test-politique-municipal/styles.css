/* Questionnaire-specific styles extracted from globals to reduce unused CSS above-the-fold */

/* Tailwind layer is optional here; we use plain CSS classes to avoid requiring @tailwind base in partial files */
/* Global selectors to ensure availability when imported by the questionnaire page */
  :root {
    /* fallback durations in case not defined */
    --transition-duration-enter: 350ms;
    --transition-duration-exit: 250ms;
    --transition-enter: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    --transition-exit: cubic-bezier(0.55, 0.085, 0.68, 0.53);
  }

    .question-sweep-enter {
      animation: questionSweepIn var(--transition-duration-enter) var(--transition-enter) forwards;
      will-change: transform, opacity;
    }
    .question-sweep-exit {
      animation: questionSweepOut var(--transition-duration-exit) var(--transition-exit) forwards;
      will-change: transform, opacity;
    }
    .question-sweep-enter-back {
      animation: questionSweepInBack var(--transition-duration-enter) var(--transition-enter) forwards;
      will-change: transform, opacity;
    }
    .question-sweep-exit-back {
      animation: questionSweepOutBack var(--transition-duration-exit) var(--transition-exit) forwards;
      will-change: transform, opacity;
    }
    .question-content-enter {
      animation: contentFadeUp calc(var(--transition-duration-enter) * 0.8) var(--transition-enter) 50ms both;
      will-change: transform, opacity;
    }
    .option-button-enter {
      opacity: 0;
      animation: optionCascade calc(var(--transition-duration-enter) * 0.7) var(--transition-enter) both;
      will-change: transform, opacity;
    }
 

  .option-button-enter:nth-child(1) { animation-delay: 80ms; }
  .option-button-enter:nth-child(2) { animation-delay: 100ms; }
  .option-button-enter:nth-child(3) { animation-delay: 120ms; }
  .option-button-enter:nth-child(4) { animation-delay: 140ms; }
  .option-button-enter:nth-child(5) { animation-delay: 160ms; }
  .option-button-enter:nth-child(6) { animation-delay: 180ms; }

  .questionnaire-compact {
    min-height: 100vh;
    min-height: 100dvh;
  }

  /* Fixed layout for consistent button positioning */
  .card-question {
    display: grid;
    grid-template-rows: auto 1fr auto;
    min-height: 500px; /* Hauteur minimale pour assurer la cohérence */
  }

  .question-header {
    min-height: 80px; /* Hauteur minimale flexible pour la zone de question */
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
  }

  .question-title {
    /* Les styles de police sont maintenant gérés par le composant AdaptiveQuestionTitle */
    flex: 1;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  /* Responsive adjustments */
  @media (min-width: 768px) {
    .question-header {
      min-height: 60px; /* Hauteur minimale réduite sur desktop */
    }
  }

  .question-grid {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    gap: 0.375rem;
    margin-bottom: 0.75rem;
  }

  @keyframes questionSweepIn {
    0% { opacity: 0; transform: translateX(60px) scale(0.95); }
    40% { opacity: 0.6; transform: translateX(8px) scale(0.98); }
    70% { opacity: 0.9; transform: translateX(-3px) scale(1.01); }
    100% { opacity: 1; transform: translateX(0) scale(1); }
  }

  @keyframes questionSweepOut {
    0% { opacity: 1; transform: translateX(0) scale(1); }
    30% { opacity: 0.8; transform: translateX(-8px) scale(0.99); }
    100% { opacity: 0; transform: translateX(-50px) scale(0.95); }
  }

  @keyframes questionSweepInBack {
    0% { opacity: 0; transform: translateX(-60px) scale(0.95); }
    40% { opacity: 0.6; transform: translateX(-8px) scale(0.98); }
    70% { opacity: 0.9; transform: translateX(3px) scale(1.01); }
    100% { opacity: 1; transform: translateX(0) scale(1); }
  }

  @keyframes questionSweepOutBack {
    0% { opacity: 1; transform: translateX(0) scale(1); }
    30% { opacity: 0.8; transform: translateX(8px) scale(0.99); }
    100% { opacity: 0; transform: translateX(50px) scale(0.95); }
  }

  @keyframes contentFadeUp {
    0% { opacity: 0; transform: translateY(12px); }
    100% { opacity: 1; transform: translateY(0); }
  }

  @keyframes optionCascade {
    0% { opacity: 0; transform: translateY(8px) scale(0.96); }
    100% { opacity: 1; transform: translateY(0) scale(1); }
  }

  @media (prefers-reduced-motion: reduce) {
    :root {
      --transition-duration-enter: 150ms;
      --transition-duration-exit: 100ms;
    }
    @keyframes questionSweepIn { 0% { opacity: 0; transform: translateX(10px); } 100% { opacity: 1; transform: translateX(0); } }
    @keyframes questionSweepOut { 0% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(-10px); } }
    @keyframes questionSweepInBack { 0% { opacity: 0; transform: translateX(-10px); } 100% { opacity: 1; transform: translateX(0); } }
    @keyframes questionSweepOutBack { 0% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(10px); } }
    @keyframes contentFadeUp { 0% { opacity: 0; } 100% { opacity: 1; } }
    @keyframes optionCascade { 0% { opacity: 0; } 100% { opacity: 1; } }
  }


