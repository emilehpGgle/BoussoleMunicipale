import { NextRequest, NextResponse } from 'next/server'
import { migrateQuestions, migrateParties, migratePartyPositions, verifyMigration } from '@/lib/migration-script'

/**
 * API route pour ex√©cuter la migration compl√®te des donn√©es
 * GET /api/migrate - Lance la migration COMPL√àTE (questions + partis + positions)
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export async function GET(_request: NextRequest) {
  try {
    console.log('üöÄ [MIGRATE API] D√©but de la migration COMPL√àTE')
    console.log('=' .repeat(50))
    
    // √âtape 1: Migrer TOUTES les questions (incluant nos corrections importance_direct ‚Üí agreement)
    console.log('üìù [MIGRATE API] Migration des questions...')
    await migrateQuestions()
    
    // √âtape 2: Migrer les partis (incluant nos corrections de positions)
    console.log('üèõÔ∏è [MIGRATE API] Migration des partis...')
    await migrateParties()
    
    // √âtape 3: Migrer les positions des partis (avec nos corrections)
    console.log('üìä [MIGRATE API] Migration des positions...')
    await migratePartyPositions()
    
    // √âtape 4: V√©rifier que tout est synchronis√©
    console.log('üîç [MIGRATE API] V√©rification finale...')
    const verification = await verifyMigration()
    
    console.log('=' .repeat(50))
    console.log('üéâ [MIGRATE API] Migration compl√®te termin√©e avec succ√®s!')
    
    return NextResponse.json({
      success: true,
      message: 'Migration compl√®te termin√©e - Base de donn√©es synchronis√©e avec les derni√®res corrections',
      ...verification
    })
    
  } catch (error) {
    console.error('‚ùå [MIGRATE API] Erreur lors de la migration compl√®te:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      message: 'Erreur lors de la migration compl√®te - Base de donn√©es NON synchronis√©e'
    }, { status: 500 })
  }
}

/**
 * POST /api/migrate - V√©rification simple des questions
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export async function POST(_request: NextRequest) {
  try {
    console.log('üîç [MIGRATE API] V√©rification simple des questions')
    
    const supabase = createClient()
    
    const { data: questions, error } = await supabase
      .from('questions')
      .select('id, response_type')
      .order('order_index')
    
    if (error) {
      throw new Error(`Erreur de v√©rification: ${error.message}`)
    }
    
    return NextResponse.json({
      success: true,
      message: 'V√©rification termin√©e',
      questionsCount: questions?.length || 0,
      priorityQuestions: questions?.filter(q => q.response_type === 'priority_ranking') || []
    })
    
  } catch (error) {
    console.error('‚ùå [MIGRATE API] Erreur lors de la v√©rification:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      message: 'Erreur lors de la v√©rification'
    }, { status: 500 })
  }
} 