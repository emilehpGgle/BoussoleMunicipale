import { NextRequest, NextResponse } from 'next/server'
import { SessionsAPI } from '@/lib/api/sessions'

// ‚úÖ Utility function pour la gestion d'erreurs simplifi√©e
const handleAPIError = (error: unknown, context: string) => {
  console.error(`‚ùå [API SESSIONS] Erreur ${context}:`, {
    error,
    message: error instanceof Error ? error.message : String(error),
    timestamp: new Date().toISOString()
  })
  
  return NextResponse.json(
    { 
      success: false,
      error: error instanceof Error ? error.message : 'Erreur interne du serveur',
      context 
    },
    { status: 500 }
  )
}

// ‚úÖ POST - Cr√©er une nouvelle session (simplifi√©)
export async function POST(request: NextRequest) {
  try {
    console.log('üÜï [API SESSIONS] Cr√©ation session...')

    // ‚úÖ R√©cup√©rer l'IP et l'user agent (optimis√© pour anti-abus)
    const clientIP = SessionsAPI.getClientIP(request) || 'unknown'
    const rawUserAgent = request.headers.get('user-agent')
    const userAgent = rawUserAgent?.slice(0, 255) || 'Unknown'

    // ‚úÖ V√©rifier les variables d'environnement
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå [API SESSIONS] Variables d\'environnement Supabase manquantes')
      return NextResponse.json(
        { success: false, error: 'Configuration serveur invalide' },
        { status: 500 }
      )
    }

    // ‚úÖ Cr√©er l'instance d'API
    const sessionsAPI = new SessionsAPI()
    
    // ‚úÖ V√©rifier le rate limiting par IP
    const rateLimitCheck = await sessionsAPI.checkIPRateLimit(clientIP)
    if (!rateLimitCheck.allowed) {
      console.warn('‚ö†Ô∏è [API SESSIONS] Rate limit d√©pass√© pour IP:', clientIP, 'Sessions:', rateLimitCheck.sessionCount)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Trop de tentatives r√©centes. Veuillez patienter avant de cr√©er une nouvelle session.',
          retryAfter: 3600 // 1 heure en secondes
        },
        { status: 429 } // Too Many Requests
      )
    }

    // ‚úÖ Cr√©er une nouvelle session (avec IP pour anti-abus)
    const session = await sessionsAPI.createSession(userAgent, clientIP !== 'unknown' ? clientIP : undefined)

    console.log('‚úÖ [API SESSIONS] Session cr√©√©e:', session.id, 'IP:', clientIP)

    return NextResponse.json({ 
      success: true, 
      session: {
        id: session.id,
        sessionToken: session.session_token,
        expiresAt: session.expires_at,
        createdAt: session.created_at
      },
      message: 'Session cr√©√©e avec succ√®s' 
    })

  } catch (error) {
    return handleAPIError(error, 'cr√©ation de session')
  }
}

// ‚úÖ GET - V√©rifier le statut d'une session (simplifi√©)
export async function GET(request: NextRequest) {
  try {
    console.log('üîç [API SESSIONS] Validation session...')

    // ‚úÖ Extraire le sessionToken depuis le header Authorization
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå [API SESSIONS] Header Authorization manquant ou invalide')
      return NextResponse.json(
        { success: false, error: 'Header Authorization Bearer requis' },
        { status: 400 }
      )
    }
    
    const sessionToken = authHeader.substring(7) // Retirer 'Bearer '
    
    // ‚úÖ Validation basique du format
    if (!sessionToken || sessionToken.length < 10) {
      console.log('‚ùå [API SESSIONS] Format sessionToken invalide:', sessionToken)
      return NextResponse.json(
        { success: false, error: 'Format de sessionToken invalide' },
        { status: 400 }
      )
    }

    console.log('üîç [API SESSIONS] Validation token:', sessionToken.substring(0, 8) + '...')

    // ‚úÖ Cr√©er l'instance d'API
    const sessionsAPI = new SessionsAPI()

    // ‚úÖ R√©cup√©rer et v√©rifier la session
    const session = await sessionsAPI.getSessionByToken(sessionToken)
    
    if (!session) {
      console.log('‚ùå [API SESSIONS] Session non trouv√©e en base')
      return NextResponse.json({
        success: false,
        valid: false,
        message: 'Session invalide ou expir√©e'
      }, { status: 401 })
    }

    console.log('‚úÖ [API SESSIONS] Session trouv√©e:', session.id)

    // ‚úÖ Mettre √† jour l'activit√© de la session
    await sessionsAPI.updateSessionActivity(session.id)

    console.log('‚úÖ [API SESSIONS] Session valid√©e avec succ√®s')

    return NextResponse.json({
      success: true,
      valid: true,
      session: {
        id: session.id,
        sessionToken: session.session_token,
        expiresAt: session.expires_at,
        createdAt: session.created_at
      },
      message: 'Session valide'
    })

  } catch (error) {
    console.error('‚ùå [API SESSIONS] Erreur validation:', error)
    return NextResponse.json({
      success: false,
      valid: false,
      error: error instanceof Error ? error.message : 'Erreur interne',
      message: 'Erreur lors de la validation'
    }, { status: 500 })
  }
}

// ‚úÖ DELETE - Supprimer une session (simplifi√©)
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const sessionToken = searchParams.get('sessionToken')

    if (!sessionToken) {
      return NextResponse.json(
        { success: false, error: 'sessionToken est requis' },
        { status: 400 }
      )
    }

    // ‚úÖ Cr√©er l'instance d'API
    const sessionsAPI = new SessionsAPI()

    // ‚úÖ Supprimer la session
    await sessionsAPI.deleteSessionByToken(sessionToken)

    return NextResponse.json({ 
      success: true, 
      message: 'Session supprim√©e avec succ√®s' 
    })

  } catch (error) {
    return handleAPIError(error, 'suppression de session')
  }
}

// ‚úÖ PUT - Monitoring des activit√©s suspectes (admin uniquement)
export async function PUT() {
  try {
    // ‚úÖ V√©rification simple pour l'environnement de d√©veloppement
    if (process.env.NODE_ENV !== 'development') {
      return NextResponse.json(
        { success: false, error: 'Acc√®s non autoris√©' },
        { status: 403 }
      )
    }

    console.log('üìä [API SESSIONS] R√©cup√©ration des statistiques de s√©curit√©...')

    // ‚úÖ Cr√©er l'instance d'API
    const sessionsAPI = new SessionsAPI()

    // ‚úÖ D√©tecter l'activit√© suspecte
    const suspiciousActivity = await sessionsAPI.detectSuspiciousActivity()
    const sessionStats = await sessionsAPI.getSessionStats()

    return NextResponse.json({
      success: true,
      data: {
        suspicious: suspiciousActivity,
        stats: sessionStats,
        timestamp: new Date().toISOString()
      },
      message: 'Statistiques r√©cup√©r√©es avec succ√®s'
    })

  } catch (error) {
    return handleAPIError(error, 'r√©cup√©ration des statistiques')
  }
} 